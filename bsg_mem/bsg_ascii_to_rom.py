#!/usr/bin/python3

#
# input format:
#  lines of verilog binary strings or number in verilog standard format, e.g.
#    1001_10101_10011_1101
#    32'd021231
#    8'c07001
#    16'hDEADBEEF
#    4'b0110
#  comments beginning with # sign
#  lines with just whitespace
#
# output format:
#  a module that implements a rom
#
# usage: bsg_ascii_to_rom.py <filename> <modulename>
#
# to set the default value of generated case statement:
#
# usage: bsg_ascii_to_rom.py <filename> <modulename> default_value  
# default value should be a valid systemverilog expression.
# 
 
import sys;
import os;
import string
import re;

default_value = "X"
base_converter = {"d":10, "b":2, "c": 8, "h": 16};

value_exp = re.compile(r"[\d]+'([dbhc])([\d_]+)")

if (len(sys.argv)==4) :
    default_value = sys.argv[3]

if ((len(sys.argv)!=3) and (len(sys.argv)!=4)) :
    print("Usage ascii_to_rom.py <filename> <modulename>");
    exit(-1);
if default_value == "zero":
    default_value = 0;

with open(sys.argv[1],"r") as my_file:
    addr = 0;
    print("// auto-generated by bsg_ascii_to_rom.py from {}; do not modify.".format(os.path.abspath(sys.argv[1])));
    print("module {} #(".format(sys.argv[2]));
    print("  parameter integer width_p = \"inv\"");
    print("  ,parameter integer addr_width_p = \"inv\"");
    print(")(");
    print("  input [addr_width_p-1:0] addr_i");
    print("  ,output logic [width_p-1:0] data_o");
    print(");");
    print("always_comb unique case(addr_i)");
    for nu, line in enumerate(my_file):
        line = line.strip();
        if(line.startswith("#")):
            print("// {}".format(line).rjust(10));
        else:
            # check type
            val = default_value;
            base = "d";
            if line.isdigit() or (line.replace("_","")).isdigit(): # immediate decimal
                val = "".join(filter(lambda x: x.isdigit(), line));
                base = "b";
            else:
                mch = value_exp.match(line);
                if mch:
                    base = mch.group(1);
                    val = "".join(filter(lambda x: x.isdigit(), mch.group(2)));
                else:
                    print("line {}: {} is not a valid systemverilog expression!".format(nu, line));
                    exit(-1)
            val = int(val, base_converter[base]);
            print("    {:x}: data_o = width_p'({}); // 0x{:x}".format(addr, val, val))
    if default_value != "X":
        print("    default: data_o = width_p'({});".format(default_value));
    else:
        print("    default: data_o = 'X;");

    print("endcase")
    print("endmodule")
