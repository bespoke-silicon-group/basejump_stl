import random
import sys
import math

TAGST=16
ALOCK=27
AUNLOCK=28
LM=4
SM=12

class TraceGen:
  
  def __init__(self, data_width_p):
    self.data_width_p = data_width_p

  def print_header(self):
    print("#### generated by trace_gen.py ####")

  def get_packet(self, opcode, addr, data):
    packet = "0001_"
    packet += format(opcode, "05b") + "_"
    packet += format(addr, "032b") + "_"
    packet += format(data, "0"+str(self.data_width_p)+"b")
    return packet

  def tagst(self, addr, data):
    print(self.get_packet(TAGST,addr,data))

  def alock(self, addr):
    print(self.get_packet(ALOCK,addr,0))

  def aunlock(self, addr):
    print(self.get_packet(AUNLOCK,addr,0))

  def load_word(self, addr):
    print(self.get_packet(LM,addr,0))

  def store_word(self, addr, data):
    print(self.get_packet(SM,addr,data))

  def wait_one_cycle(self):
    packet = "0000_"
    packet += "00000_"
    packet += format(0, "032b") +  "_"
    packet += format(0, "0"+str(self.data_width_p)+"b")
    print(packet)

  def wait(self, cycle):
    packet = "0110_"
    packet += "00000_"
    packet += format(0, "032b") +  "_"
    packet += format(cycle, "032b")
    packet += format(0, "0"+str(self.data_width_p)+"b")
    print(packet)
    packet = "0101_"
    packet += "00000_"
    packet += format(0, "032b") +  "_"
    packet += format(0, "032b")
    packet += format(0, "0"+str(self.data_width_p)+"b")
    print(packet)


if __name__ == "__main__":
  num_instr_p = int(sys.argv[1])  
  seed_p = int(sys.argv[2])
  ways_p = int(sys.argv[3])
  data_width_p = int(sys.argv[4])
  sets_p = 4
  block_size_in_words_p=4
  print("# seed_p = " + str(seed_p))

  byte_offset_width = int(math.log(data_width_p>>3,2))
  word_offset_width = int(math.log(block_size_in_words_p,2))
  index_width = int(math.log(sets_p,2))

  random.seed(seed_p)

  tg = TraceGen(data_width_p)
  tg.print_header()
  for i in range(sets_p*ways_p):
    tg.tagst(addr=(i<<(byte_offset_width+word_offset_width)), data=0)

  # uncomment for lock test
  # tg.alock(addr=0)
  # tg.tagst(addr=(1<<4)+(1<<6), data=(1<<30)) # invalid and locked
  #########################

  

  store_data = 1
  for i in range(num_instr_p):
    load_not_store = random.randint(0,1)
    word_offset = random.randint(0,3)<< (byte_offset_width)
    index = random.randint(0,3) << (byte_offset_width+word_offset_width)
    tag = random.randint(0,15) << (byte_offset_width+word_offset_width+index_width)
    addr = tag + index + word_offset
    if (load_not_store):
      tg.load_word(addr=addr)
    else:
      tg.store_word(addr=addr,data=store_data)
      store_data += 1
    delay = random.randint(0,15)
    if (delay == 0):
      continue
    elif (delay == 1):
      tg.wait_one_cycle()
    else:
      tg.wait(cycle=delay)
