// auto-generated by bsg_ascii_to_rom.py from /home/dcjung/ee477/module2/bsg_ip_cores/testing/bsg_data_cache/trace_master_0.tr; do not modify
module bsg_trace_master_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // #################################################
                                 // #
                                 // # format:   <4 bit op> <fsb packet>
                                 // #   op = 0000: wait one cycle
                                 // #   op = 0001: send
                                 // #   op = 0010: receive & check
                                 // #   op = 0011: done; disable but do not stop
                                 // #   op = 0100: finish; stop simulation
                                 // #   op = 0101: wait for cycle ctr to reach 0
                                 // #   op = 0110: set cycle ctr
                                 // #
                                 // # fsb packet (data)
                                 // # 1 bit    75 bits
                                 // #   0       data
                                 // #
                                 // # fsb packet (control)
                                 // # 1 bit    7 bits    4 bits   64 bits
                                 // #   1      opcode    srcid    data
                                 // #
                                 // # opcodes
                                 // #   1: 0000_001 = disable
                                 // #   2: 0000_010 = enable
                                 // #   5: 0000_101 = assert reset
                                 // #   6: 0000_110 = deassert reset
                                 // #
                                 // #################################################
                                 // # send ######################
                                 // # 3 bits - filler
                                 // # 1 bit  - sigext
                                 // # 3 bits - word/half/byte
                                 // # 4 bits - op
                                 // #############################
                                 // # 0000 | LD
                                 // # 0001 | ST
                                 // # 0010 | invalidate (TAGST)
                                 // # 0011 | flush
                                 // # 0100 | valid
                                 // # 0101 | lnaddr
                                 // # 0110 | afl
                                 // # 0111 | aflinv
                                 // # 1000 | ainv
                                 // #############################
                                 // # 32 bits - addr_i
                                 // # 32 bits - data_i
                                 // #############################
                                 // # recv ######################
                                 // #
                                 // # 43 - filler
                                 // # 32 - data_o
                                 // #
                                 // #############################
                                 // #### RESET ####
         0: data_o = width_p ' (80'b0001_1_0000101_00000000000000000000000000000000000000000000000000000000000000000000); // 0x18500000000000000000
         1: data_o = width_p ' (80'b0001_1_0000110_00000000000000000000000000000000000000000000000000000000000000000000); // 0x18600000000000000000
                                 // #### TEST BEGIN ####
         2: data_o = width_p ' (80'b0001_0_000_0_000_0010_0000000000000000_0000000000000000__0000000000000000_0000000000000000); // 0x10020000000000000000
         3: data_o = width_p ' (80'b0001_0_000_0_000_0010_0000000000000000_0100000000000000__0000000000000000_0000000000000000); // 0x10020000400000000000
         4: data_o = width_p ' (80'b0001_0_000_0_100_0001_0000000000000000_0000000000000000__1111111111111111_1111111111111111); // 0x104100000000FFFFFFFF
         5: data_o = width_p ' (80'b0001_0_000_0_100_0000_0000000000000000_0000000000000000__0000000000000000_0000000000000000); // 0x10400000000000000000
         6: data_o = width_p ' (80'b0010_0_0000000000000000000000000000000000000000000_11111111111111111111111111111111); // 0x200000000000FFFFFFFF
                                 // #### DONE ####
         7: data_o = width_p ' (80'b0110_0000000000000000000000000000000000000000000000000000000000000000000000010000); // 0x60000000000000000010
         8: data_o = width_p ' (80'b0101_0000000000000000000000000000000000000000000000000000000000000000000000000000); // 0x50000000000000000000
         9: data_o = width_p ' (80'b0100_0000000000000000000000000000000000000000000000000000000000000000000000000000); // 0x40000000000000000000
   default: data_o = 'X;
endcase
endmodule
