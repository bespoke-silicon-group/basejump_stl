# PRO-TIP: Set editior syntax to bash (or sh)

################################################################################
# DESIGN SPECIFIC TAG INFO
#
# Number | Description                       | Width
# -------+-----------------------------------+-------
#     0  | Delay Line Async Reset            | 1-bit
#   4-1  | Delay Line Ctrl Bits              | 8-bits
#   8-5  | Delay Line Trigger                | 1-bit
#   9    | 2x-to-1x Clock Downsampler Reset  | 3-bit
# 11-10  | DMC trefi                         | 8-bits
#    12  | DMC tmrd trfc                     | 8-bits
#    13  | DMC trc trp                       | 8-bits
#    14  | DMC tras trrd                     | 8-bits
#    15  | DMC trcd twr                      | 8-bits
#    16  | DMC twtr trtp                     | 8-bits
#    17  | DMC dqs_sel_cal tcas              | 8-bits
#    18  | DMC row col width                 | 8-bits
#    19  | DMC bank position width           | 8-bits
# 21-20  | DMC initialization cycles         | 8-bits
# 23-22  | DMC read calibration cycles       | 8-bits
# 24-25  | DMC init read count               | 8-bits
#    26  | DMC periodic read count           | 8-bits
#    27  | DMC Async Reset                   | 1-bit
#    28  | DMC stall_transactions            | 1-bit
#    29  | DMC test_mode                     | 1-bit
#    30  | Clkgen Async Reset                | 1-bit
#    31  | Clkgen Oscillator                 | 5-bits
#    32  | Clkgen Osc Trigger                | 1-bit
#    33  | Clkgen Downsampler                | 2-bits
#    34  | Clkgen Select                     | 2 bits
#
#
# Number of masters = 1
# Number of clients = 29
# Max data width = 8
#
# Packet lengths
# <4b>___<1b>___<5b>_1b_<4b>___<8b>
# <4b>___<19b>
#
# There is one tagmaster driving 29 clients in the traffic_generator. The 1 bit
# masterEn indicates whether the tag master is selected or not.
#

################################################################################
# Tag Trace Replay Packet Format
#
# M = number of masters
# N = max(1, clog2(#_of_tag_clients))
# D = max(client_1_width, client_2_width, ..., client_n_width)
# L = clog2(D+1)
#
# |<    4-bits    >|< M-bits >|< N-bits >|<     1-bit    >|< L-bits >|< D-bits >|
# +----------------+----------+----------+----------------+----------+----------+
# | replay command | masterEn |  nodeID  | data_not_reset |  length  |   data   |
# +----------------+----------+----------+----------------+----------+----------+
#
# Replay Commands
#   0 = 0000 = Wait a cycle
#   1 = 0001 = Send data
#   2 = 0010 = Receive data
#   3 = 0011 = Assert done_o ouput signal
#   4 = 0100 = End test (calls $finish)
#   5 = 0101 = Wait for cycle_counter == 0
#   6 = 0110 = Initialize cycle_counter with a 16 bit number

################################################################################
#
# RESET BSG TAG MASTER
#
# First, we must reset the bsg_tag_master. To do this, we send a 1, then we
# send a bunch of 0's! By a bunch, the exact amount is (2^clog2(N+1+L+D))+1

# Send a full 0 packet to all masters
0001___1___000000_0_0000___00000000

# Wait ~32 cycles
0110___00000000000000100000
0101___00000000000000000000

################################################################################
#
# RESET BSG TAG CLIENTS
#
# Next, we should reset each client node. To do this we send a packet
# that has all 1's for data, and has data_not_reset=0. The nodeID should
# be the ID of the client we are reseting, and length should be the
# corrent length of the packet. We should send this packet to each client.

#SEND  en   id=0  r l=1
0001___1___000000_0_0001___00000001
#SEND  en   id=1  r l=5
0001___1___000001_0_0101___00011111
#SEND  en   id=2  r l=5
0001___1___000010_0_0101___00011111
#SEND  en   id=3  r l=5
0001___1___000011_0_0101___00011111
#SEND  en   id=4  r l=5
0001___1___000100_0_0101___00011111
#SEND  en   id=5  r l=1
0001___1___000101_0_0001___00000001
#SEND  en   id=6  r l=1
0001___1___000110_0_0001___00000001
#SEND  en   id=7  r l=1
0001___1___000111_0_0001___00000001
#SEND  en   id=8  r l=1
0001___1___001000_0_0001___00000001
#SEND  en   id=9  r l=3
0001___1___001001_0_0011___00000111
#SEND  en   id=10  r l=8
0001___1___001010_0_1000___11111111
#SEND  en   id=11  r l=8
0001___1___001011_0_1000___11111111
#SEND  en   id=12  r l=8
0001___1___001100_0_1000___11111111
#SEND  en   id=13  r l=8
0001___1___001101_0_1000___11111111
#SEND  en   id=14  r l=8
0001___1___001110_0_1000___11111111
#SEND  en   id=15  r l=8
0001___1___001111_0_1000___11111111
#SEND  en   id=16  r l=8
0001___1___010000_0_1000___11111111
#SEND  en   id=17  r l=7
0001___1___010001_0_1000___01111111
#SEND  en   id=18  r l=8
0001___1___010010_0_1000___11111111
#SEND  en   id=19  r l=8
0001___1___010011_0_1000___11111111
#SEND  en   id=20  r l=8
0001___1___010100_0_1000___11111111
#SEND  en   id=21  r l=8
0001___1___010101_0_1000___11111111

#SEND  en   id=22  r l=8
0001___1___010110_0_1000___11111111
#SEND  en   id=23  r l=8
0001___1___010111_0_1000___11111111

#SEND  en   id=24  r l=8
0001___1___011000_0_1000___11111111
#SEND  en   id=25  r l=8
0001___1___011001_0_1000___11111111
#SEND  en   id=26  r l=8
0001___1___011010_0_1000___11111111

#SEND  en   id=27  r l=1
0001___1___011011_0_0001___00000001
#SEND  en   id=28  r l=1
0001___1___011100_0_0001___00000001
#SEND  en   id=29  r l=1
0001___1___011101_0_0001___00000001
#SEND  en   id=30  r l=1
0001___1___011110_0_0001___00000001
#SEND  en   id=31  r l=5
0001___1___011111_0_0101___00011111
#SEND  en   id=32  r l=1
0001___1___100000_0_0001___00000001
#SEND  en   id=33  r l=2
0001___1___100001_0_0010___00000011
#SEND  en   id=34  r l=2
0001___1___100010_0_0010___00000011
################################################################################
#
# START CONFIGURATION
#
# The bsg tag network is now live! We can begin our configuration.
#    25  | Clkgen Async Reset                 | 1-bit
#    26  | Clkgen Oscillator                  | 5-bits
#    27  | Clkgen Osc Trigger                 | 1-bit
#    28  | Clkgen Downsampler                 | 2-bits
#    29  | Clkgen Select                      | 2-bits
### Async clk-gen reset to get things moving

#SEND  en   id=30   d l=1    {async_reset}
0001___1___011110_1_0001___00000000
0001___1___011110_1_0001___00000001
0001___1___011110_1_0001___00000000

### Set osc triggers low

#SEND  en   id=32   d l=1    {trigger}
0001___1___100000_1_0001___00000000

### Program the raw oscillators speed

#SEND  en   id=31   d l=5    {adt, cdt, fdt}
0001___1___011111_1_0101___00011011

### Trigger oscillators

#SEND  en   id=32   d l=1    {trigger}
0001___1___100000_1_0001___00000001
0001___1___100000_1_0001___00000000

#SEND  en   id=33   d l=3    {ds_val, reset}
0001___1___100001_1_0011___00000001
0001___1___100001_1_0011___00000000

#SEND  en   id=34   d l=2    {sel}
0001___1___100010_1_0010___00000000

### Set delay line triggers low

#SEND  en   id=5  d l=1    {trigger}
0001___1___000101_1_0001___00000000
#SEND  en   id=6  d l=1    {trigger}
0001___1___000110_1_0001___00000000
#SEND  en   id=7  d l=1    {trigger}
0001___1___000111_1_0001___00000000
#SEND  en   id=8  d l=1    {trigger}
0001___1___001000_1_0001___00000000

### Program the delay lines

#SEND  en   id=1  d l=5    {adt, cdt, fdt}
0001___1___000001_1_0101___00011011
#SEND  en   id=2  d l=5    {adt, cdt, fdt}
0001___1___000010_1_0101___00011011
#SEND  en   id=3  d l=5    {adt, cdt, fdt}
0001___1___000011_1_0101___00011011
#SEND  en   id=4  d l=5    {adt, cdt, fdt}
0001___1___000100_1_0101___00011011

### Trigger delay lines

#SEND  en   id=5  d l=1    {trigger}
0001___1___000101_1_0001___00000001
0001___1___000101_1_0001___00000000
#SEND  en   id=6  d l=1    {trigger}
0001___1___000110_1_0001___00000001
0001___1___000110_1_0001___00000000
#SEND  en   id=7  d l=1    {trigger}
0001___1___000111_1_0001___00000001
0001___1___000111_1_0001___00000000
#SEND  en   id=8  d l=1    {trigger}
0001___1___001000_1_0001___00000001
0001___1___001000_1_0001___00000000

### Async delay line reset to get things moving

#SEND  en   id=0  d l=1    {async_reset}
0001___1___000000_1_0001___00000000
0001___1___000000_1_0001___00000001
0001___1___000000_1_0001___00000000

### Set downsamples and reset
#
#SEND  en   id=9  d l=3    {ds_val, reset}
0001___1___001001_1_0011___00000001
0001___1___001001_1_0011___00000000

#SEND  en   id=27  d l=1    {reset}
#ASSERT DMC RESET
0001___1___011011_1_0001___00000001

# Reset DMC configs and set dmc_p
#SEND  en   id=10  d l=8    {trefi[7:0]}
0001___1___001010_1_1000___11111111
#SEND  en   id=11  d l=8    {trefi[15:8]}
0001___1___001011_1_1000___00000011
#SEND  en   id=12  d l=8    {trfc, tmrd}
0001___1___001100_1_1000___11110001
#SEND  en   id=13  d l=8    {trp, trc}
0001___1___001101_1_1000___00111011
#SEND  en   id=14  d l=8    {trrd, tras}
0001___1___001110_1_1000___00101000
#SEND  en   id=15  d l=8    {twr, trcd}
0001___1___001111_1_1000___10110010
#SEND  en   id=16  d l=8    {trtp, twtr}
0001___1___010000_1_1000___10101001
#SEND  en   id=17  d l=7    {dqs_sel_cal, cas}
0001___1___010001_1_0111___00110011
#SEND  en   id=18  d l=8    {row_width, col_width}
0001___1___010010_1_1000___11101011
#SEND  en   id=19  d l=8    {bank_pos, bank_width}
0001___1___010011_1_1000___01100110
#SEND  en   id=20  d l=8    {init_cycles[7:0]}
0001___1___010100_1_1000___01001010
#SEND  en   id=21  d l=8    {init_cycles[15:8]}
0001___1___010101_1_1000___10111100

#SEND  en   id=22  d l=8    {rd_calib_cycles[7:0]}
0001___1___010110_1_1000___11111111
#SEND  en   id=23  d l=8    {rd_calib_cycles[15:8]}
0001___1___010111_1_1000___00000010

#SEND  en   id=24  d l=8    {init_read_count[7:0]}
0001___1___011000_1_1000___01100100
#SEND  en   id=25  d l=8    {init_read_count[15:8]}
0001___1___011001_1_1000___00000000
#SEND  en   id=26  d l=8    {periodic_calib_num_reads_todo[7:0]}
0001___1___011010_1_1000___00000010

#SEND  en   id=27  d l=1    {reset}
# DEASSERT DMC RESET
0001___1___011011_1_0001___00000000

# SEND en  id=28 d l=1     {stall_transactions}
0001___1___011100_1_0001___00000000
# SEND en  id=29 d l=1     {test_mode}
0001___1___011101_1_0001___00000000
################################################################################
#
# Done!
#
# Configuration is complete and we are out of reset. We should indicate we are
# done to allow the next part of the testbench to come alive.

# Assert done_o
0011___00000000000000000000
