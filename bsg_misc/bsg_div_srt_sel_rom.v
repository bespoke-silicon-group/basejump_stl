// auto-generated by bsg_ascii_to_rom.py from /home/xusine/Desktop/BSGProject/ComputerArithmetic/bsg_div_srt/bsg_div_srt_sel_rom.txt; do not modify
module bsg_div_srt_sel_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // # You should modify the default value to 2'b11 in genereated .v file.
                                 // # 000: eZERO
                                 // # 001: ePOS_1
                                 // # 011: ePOS_2
                                 // # 111: eNEG_2
                                 // # 101: eNEG_1
                                 // #0
         0: data_o = width_p ' (2'b00); // 0x0
         1: data_o = width_p ' (2'b00); // 0x0
         2: data_o = width_p ' (2'b00); // 0x0
         3: data_o = width_p ' (2'b00); // 0x0
         4: data_o = width_p ' (2'b00); // 0x0
         5: data_o = width_p ' (2'b00); // 0x0
         6: data_o = width_p ' (2'b00); // 0x0
         7: data_o = width_p ' (2'b00); // 0x0
                                 // #1
         8: data_o = width_p ' (2'b00); // 0x0
         9: data_o = width_p ' (2'b00); // 0x0
        10: data_o = width_p ' (2'b00); // 0x0
        11: data_o = width_p ' (2'b00); // 0x0
        12: data_o = width_p ' (2'b00); // 0x0
        13: data_o = width_p ' (2'b00); // 0x0
        14: data_o = width_p ' (2'b00); // 0x0
        15: data_o = width_p ' (2'b00); // 0x0
                                 // #2
        16: data_o = width_p ' (2'b01); // 0x1
        17: data_o = width_p ' (2'b00); // 0x0
        18: data_o = width_p ' (2'b00); // 0x0
        19: data_o = width_p ' (2'b00); // 0x0
        20: data_o = width_p ' (2'b00); // 0x0
        21: data_o = width_p ' (2'b00); // 0x0
        22: data_o = width_p ' (2'b00); // 0x0
        23: data_o = width_p ' (2'b00); // 0x0
                                 // #3
        24: data_o = width_p ' (2'b01); // 0x1
        25: data_o = width_p ' (2'b01); // 0x1
        26: data_o = width_p ' (2'b01); // 0x1
        27: data_o = width_p ' (2'b01); // 0x1
        28: data_o = width_p ' (2'b00); // 0x0
        29: data_o = width_p ' (2'b00); // 0x0
        30: data_o = width_p ' (2'b00); // 0x0
        31: data_o = width_p ' (2'b00); // 0x0
                                 // #4
        32: data_o = width_p ' (2'b01); // 0x1
        33: data_o = width_p ' (2'b01); // 0x1
        34: data_o = width_p ' (2'b01); // 0x1
        35: data_o = width_p ' (2'b01); // 0x1
        36: data_o = width_p ' (2'b01); // 0x1
        37: data_o = width_p ' (2'b01); // 0x1
        38: data_o = width_p ' (2'b01); // 0x1
        39: data_o = width_p ' (2'b01); // 0x1
                                 // #5
        40: data_o = width_p ' (2'b01); // 0x1
        41: data_o = width_p ' (2'b01); // 0x1
        42: data_o = width_p ' (2'b01); // 0x1
        43: data_o = width_p ' (2'b01); // 0x1
        44: data_o = width_p ' (2'b01); // 0x1
        45: data_o = width_p ' (2'b01); // 0x1
        46: data_o = width_p ' (2'b01); // 0x1
        47: data_o = width_p ' (2'b01); // 0x1
                                 // #6
        48: data_o = width_p ' (2'b11); // 0x1
        49: data_o = width_p ' (2'b01); // 0x1
        50: data_o = width_p ' (2'b01); // 0x1
        51: data_o = width_p ' (2'b01); // 0x1
        52: data_o = width_p ' (2'b01); // 0x1
        53: data_o = width_p ' (2'b01); // 0x1
        54: data_o = width_p ' (2'b01); // 0x1
        55: data_o = width_p ' (2'b01); // 0x1
                                 // #7
        56: data_o = width_p ' (2'b11); // 0x3
        57: data_o = width_p ' (2'b11); // 0x3
        58: data_o = width_p ' (2'b01); // 0x1
        59: data_o = width_p ' (2'b01); // 0x1
        60: data_o = width_p ' (2'b01); // 0x1
        61: data_o = width_p ' (2'b01); // 0x1
        62: data_o = width_p ' (2'b01); // 0x1
        63: data_o = width_p ' (2'b01); // 0x1
                                 // #8
        64: data_o = width_p ' (2'b11); // 0x3
        65: data_o = width_p ' (2'b11); // 0x3
        66: data_o = width_p ' (2'b11); // 0x3
        67: data_o = width_p ' (2'b01); // 0x1
        68: data_o = width_p ' (2'b01); // 0x1
        69: data_o = width_p ' (2'b01); // 0x1
        70: data_o = width_p ' (2'b01); // 0x1
        71: data_o = width_p ' (2'b01); // 0x1
                                 // #9
        72: data_o = width_p ' (2'b11); // 0x3
        73: data_o = width_p ' (2'b11); // 0x3
        74: data_o = width_p ' (2'b11); // 0x3
        75: data_o = width_p ' (2'b11); // 0x3
        76: data_o = width_p ' (2'b01); // 0x1
        77: data_o = width_p ' (2'b01); // 0x1
        78: data_o = width_p ' (2'b01); // 0x1
        79: data_o = width_p ' (2'b01); // 0x1
                                 // #10
        80: data_o = width_p ' (2'b11); // 0x3
        81: data_o = width_p ' (2'b11); // 0x3
        82: data_o = width_p ' (2'b11); // 0x3
        83: data_o = width_p ' (2'b11); // 0x3
        84: data_o = width_p ' (2'b11); // 0x3
        85: data_o = width_p ' (2'b01); // 0x1
        86: data_o = width_p ' (2'b01); // 0x1
        87: data_o = width_p ' (2'b01); // 0x1
                                 // #11
        88: data_o = width_p ' (2'b11); // 0x3
        89: data_o = width_p ' (2'b11); // 0x3
        90: data_o = width_p ' (2'b11); // 0x3
        91: data_o = width_p ' (2'b11); // 0x3
        92: data_o = width_p ' (2'b11); // 0x3
        93: data_o = width_p ' (2'b11); // 0x3
        94: data_o = width_p ' (2'b11); // 0x3
        95: data_o = width_p ' (2'b01); // 0x1
   default: data_o = width_p ' (2'b11);
endcase
endmodule
